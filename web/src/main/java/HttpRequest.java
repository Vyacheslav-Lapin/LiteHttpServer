import common.Private;import common.Wrapper;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.net.Socket;import java.util.Collection;import java.util.HashSet;import java.util.stream.Stream;public interface HttpRequest extends Wrapper<Socket> {    String getPath();    HttpMethod getHttpMethod();    Stream<String[]> getHeaders();//    Stream<String[]> parameters();    static HttpRequest from(Socket socket) {        try {            BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));            String[] firstString = br.readLine().trim().split(" ", 3);            HttpMethod method = HttpMethod.valueOf(firstString[0]);            String path = firstString[1]; // TODO: 10/08/16 We should parse parameters in case of get http method            Collection<String[]> headers = new HashSet<>();            while (true) {                String line = br.readLine();                if (line == null || line.trim().length() == 0) break;                headers.add(line.trim().split(": ", 2));            }            return from(socket, method, path, headers.stream());        } catch (IOException e) {            throw new RuntimeException(e);        }    }    @Private    static HttpRequest from(Socket socket, HttpMethod method, String path, Stream<String[]> headers) {        return new HttpRequest() {            @Override            public String getPath() {                return path;            }            @Override            public HttpMethod getHttpMethod() {                return method;            }            @Override            public Stream<String[]> getHeaders() {                return headers;            }            @Override            public Socket toSrc() {                return socket;            }        };    }}